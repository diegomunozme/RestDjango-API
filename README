## Project Setup
1. Clone the repository:

2. Navigate to the project directory:

3. Create a new virtual environment:

4. Activate the virtual environment:
- For Windows:
  ```
  myenv\Scripts\activate
  ```
- For Unix or Linux:
  ```
  source myenv/bin/activate
  ```

5. Install the required dependencies:


# Lab Strategies Take Home Assesment


#### Objective: Develop a REST API that:
    • Retrieves a list of stock prices based on a list of stock IDs.
    • Retrieves an individual stock price based on its ID.

## Justification for development method. 

I decided to go with Django as the framework of choice not only because 
it is an industry standard for python database design, and maintenance, but also becuase other 
more lightweight API development packages lack the community support and scalability I get in a Django model. 

So, while its development may be a little more involved on the front, Django provides the scalability necessary to 
make a production-ready application. Such as SQL table mapping, ORM models, and template files for 
multiple client side apps all in a single project.

## Folder Structure. 
The django project lives in the same folder as the python virtual enviornment 'LabStrategies'. 
This is so python versions for additional packages such as requests maintain cohesion with the django version.
Similar to docker for deployed applications on the web. 


#############
# Models.py #
#############
In a Django application, the models.py file serves as the Object Relational Mapper (ORM), where we define our
database models and their relationships. In this project, the StockData class is the sole model, designed to 
store stock price information with fields for the ticker symbol, price, price change, percentage change, and the latest 
trading day. The unique_together constraint ensures each stock entry is unique for each trading day, preventing data redundancy. 
To expand this model, additional classes could be introduced, such as a NewsData class for storing news related to
the tickers and an EarningsReport class for previous earnings reports, using primary and foreign key relationships
to link these tables. This would allow for more complex data structures, supporting strategies that rely on high
volatility during earnings reports, such as long straddles with minimal days to expiration (DTE).

Also, I want to minimize duplicates and use the sqlLite datbase that comes in a django project so I am only storing 1 set of ticker symbol and price per trading day. So we will only get the price of a certain time per day, may be open, or close depending on when you run the application. This is not ideal for actually making money so this is something that will need to change one this project is shipped to production.

#############
# views.py #
############
The views.py file implements a REST API in Django for fetching and displaying stock data using the Alpha Vantage API. 
It includes two main endpoints: one for retrieving multiple stock prices (get_stock_prices) and another for a single
stock price (get_stock_price). Stock tickers are validated for correctness, and data is 
fetched from the Alpha Vantage API if not found in the local database. Helper functions are used
to validate tickers, fetch and format data, ensuring code clarity and reducing redundancy. This design ensures efficient data retrieval
and storage, maintaining consistent and reliable API responses.

###########
# urls.py #
###########
This file defines the routing for the REST API endpoints in the Django application. It includes a route for the 
Django admin interface (admin/) for administrative tasks, a home route ("") that renders the homepage, and two
key REST API endpoints: stocks/ for retrieving prices of multiple stock tickers via the get_stock_prices view, and
 stocks/<str:ticker>/ for fetching the price of a single stock ticker via the get_stock_price view.
These routes are designed to facilitate clear and efficient API interactions, allowing users
to query multiple stocks at once or get detailed information for a single stock, adhering to REST principles for
resource-based URL structure.